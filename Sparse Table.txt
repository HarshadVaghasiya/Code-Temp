template <typename T>
class Sparse{
  public:
        int n,LG;
        vector<T> a;
        vector<vector<T>> table;
        Sparse(ll _n){
                n = _n;
                LG = log2(n) + 1;
                a.resize(n+3);
                table.resize(n+3 , vector<T> (LG+1));
        }
        T merge(ll x, ll y){
                return max(x,y);
        }
        void build(){
                for(int i = 0; i < LG; i++){
                        for(int j = 1; j <= n ;j++){
                                if(i == 0){
                                        table[j][i] = a[j];
                                }else{
                                        int L = j;
                                        int R = L + (1<<i) -1;
                                        if(R <= n){
                                                table[j][i] = merge(table[j][i - 1] , table[j+(1<<(i-1))][i - 1]);
                                        }
                                }
                        }
                }
        }
        T query(ll l,ll r){
                if(l==r)return a[l];
                ll len = r - l +1;
                ll p=log2(len);
                return merge(table[l][p],table[r - (1<<p)+1][p]);
        }
};